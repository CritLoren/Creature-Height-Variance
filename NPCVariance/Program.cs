// NPCVariance.cs
// A mutagen synthesis patcher that randomizes the height of all human NPCs in a deterministic manner
// The patcher can be configured with a minimum and maximum value for each race and gender of that race

using Mutagen.Bethesda;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.Synthesis;

namespace NPCVariance
{
    public class Program
    {
        static Lazy<Settings> _settings = null!;
        static public Settings settings => _settings.Value;
        public static async Task<int> Main(string[] args)
        {

            // Run the patcher
            return await SynthesisPipeline.Instance
                .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
                .SetTypicalOpen(GameRelease.SkyrimSE, "NPCVariance.esp")
                .SetAutogeneratedSettings("Settings", "settings.json", out _settings)
                .Run(args);
        }
        public void Write(string msg)
        {
            string[] ss = msg.Split('{', '}');
            ConsoleColor c;
            foreach (var s in ss)
                if (s.StartsWith("/"))
                    Console.ResetColor();
                else if (s.StartsWith("=") && Enum.TryParse(s.Substring(1), out c))
                    Console.ForegroundColor = c;
                else
                    Console.Write(s);
        }

        // A method to run the patch on a given load order
        private static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {

            // Loop through all the NPC records in the load order
            foreach (INpcGetter npc in state.LoadOrder.PriorityOrder.Npc().WinningOverrides())
            {
                
                // Skip the player record if the setting is enabled
                if (!settings.PatchPlayerRecord && npc.FormKey.ID == 0x00000007) continue;
                
                // Skip if the scale everything toggle is off and replace only default toggle is on
                if (!settings.ScaleEverything && settings.OnlyReplaceDefaulted && npc.Height != 1) continue;

                // Get the race and gender of the NPC
                var race = npc.Race.TryResolve(state.LinkCache);
                var gender = npc.Configuration.Flags.HasFlag(NpcConfiguration.Flag.Female) ? "Female" : "Male";

                // Get the key for the settings dictionary based on the race and gender
                var key = $"{race?.EditorID}";

                // Check if the key exists in the dictionary or is player
                if (settings.RaceGenderSettings.ContainsKey(key) || settings.ScaleEverything)
                {

                    // Create a new NPC record with the modified height and add it to the output mod
                    var modifiedNpc = state.PatchMod.Npcs.GetOrAddAsOverride(npc);

                    // Default
                    var min = settings.MinHeightScale;
                    var max = settings.MaxHeightScale;

                    if (settings.RaceGenderSettings.ContainsKey(key))
                    {
                        // Get the minimum and maximum values from the dictionary
                        if (gender == "Male") {
                            min = settings.RaceGenderSettings[key].MinMaleHeightScale;
                            max = settings.RaceGenderSettings[key].MaxMaleHeightScale;
                        } else {
                            min = settings.RaceGenderSettings[key].MinFemaleHeightScale;
                            max = settings.RaceGenderSettings[key].MaxFemaleHeightScale;
                        }
                    }

                    // Generate a random height for the NPC within the range using a deterministic seed based on their form ID
                    var seed = npc.FormKey.ID.GetHashCode();
                    var random = new Random(seed);
                    var height = min + (max - min) * (float)random.NextDouble();

                    Console.WriteLine(String.Format("{0} - {1}'s ({2}) height was changed from {3} units to {4} units.",
                            npc.FormKey, modifiedNpc.Name, modifiedNpc.EditorID, modifiedNpc.Height, (float)height));

                    modifiedNpc.Height = (float)height;
                }
                else
                {
                    // Skip the NPC if the key does not exist in the dictionary
                    if (settings.ShowDebugLogs) {
                        Console.WriteLine(String.Format("{0}: {1} ({2}) - skipped due to height for '{3}' not being configured.",
                                npc.FormKey, npc.Name, npc.EditorID, key));
                    }
                    continue;
                }
            }
        }
    }
}